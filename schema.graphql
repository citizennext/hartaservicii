"""Provides default value for input field."""
directive @default(value: JSON!) on INPUT_FIELD_DEFINITION

"""Add date formating options."""
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer(
  """Don't add default resolvers to defined fields."""
  noDefaultResolvers: Boolean
) on OBJECT

"""Do not infer field types from field values."""
directive @dontInfer(
  """Don't add default resolvers to defined fields."""
  noDefaultResolvers: Boolean
) on OBJECT

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
Define parent-child relations between types. This is used to add `child*` or
`children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []

  """
  Specifies whether a parent can have multiple children of this type or not.
  """
  many: Boolean! = false
) on OBJECT

"""
Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int

  """Copy file to static directory and return public url to it"""
  publicURL: String
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  publicURL
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resolutions___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___sizes___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  publicURL: StringQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

type GraphQLSource implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  typeName: String
  fieldName: String
}

type GraphQLSourceConnection {
  totalCount: Int!
  edges: [GraphQLSourceEdge!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  distinct(field: GraphQLSourceFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: GraphQLSourceFieldsEnum!): [GraphQLSourceGroupConnection!]!
}

type GraphQLSourceEdge {
  next: GraphQLSource
  node: GraphQLSource!
  previous: GraphQLSource
}

enum GraphQLSourceFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  typeName
  fieldName
}

input GraphQLSourceFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  typeName: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
}

type GraphQLSourceGroupConnection {
  totalCount: Int!
  edges: [GraphQLSourceEdge!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input GraphQLSourceSortInput {
  fields: [GraphQLSourceFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

"""query root"""
type HASURA {
  asset(where: HASURA_AssetWhereUniqueInput!): HASURA_Asset
  assets(after: String, before: String, first: Int, last: Int, orderBy: HASURA_AssetOrderByInput, skip: Int, where: HASURA_AssetWhereInput): [HASURA_Asset]!
  assetsConnection(after: String, before: String, first: Int, last: Int, orderBy: HASURA_AssetOrderByInput, skip: Int, where: HASURA_AssetWhereInput): HASURA_AssetConnection!
  blog(where: HASURA_BlogWhereUniqueInput!): HASURA_Blog
  blogs(after: String, before: String, first: Int, last: Int, orderBy: HASURA_BlogOrderByInput, skip: Int, where: HASURA_BlogWhereInput): [HASURA_Blog]!
  blogsConnection(after: String, before: String, first: Int, last: Int, orderBy: HASURA_BlogOrderByInput, skip: Int, where: HASURA_BlogWhereInput): HASURA_BlogConnection!

  """
  fetch data from the table: "categories"
  """
  categories(
    """distinct select on columns"""
    distinct_on: [HASURA_categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_categories_order_by!]

    """filter the rows returned"""
    where: HASURA_categories_bool_exp
  ): [HASURA_categories!]!

  """
  fetch aggregated fields from the table: "categories"
  """
  categories_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_categories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_categories_order_by!]

    """filter the rows returned"""
    where: HASURA_categories_bool_exp
  ): HASURA_categories_aggregate!

  """fetch data from the table: "categories" using primary key columns"""
  categories_by_pk(id: HASURA_uuid!): HASURA_categories

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): HASURA_Node
  page(where: HASURA_PageWhereUniqueInput!): HASURA_Page
  pages(after: String, before: String, first: Int, last: Int, orderBy: HASURA_PageOrderByInput, skip: Int, where: HASURA_PageWhereInput): [HASURA_Page]!
  pagesConnection(after: String, before: String, first: Int, last: Int, orderBy: HASURA_PageOrderByInput, skip: Int, where: HASURA_PageWhereInput): HASURA_PageConnection!

  """
  fetch data from the table: "providers"
  """
  providers(
    """distinct select on columns"""
    distinct_on: [HASURA_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_providers_order_by!]

    """filter the rows returned"""
    where: HASURA_providers_bool_exp
  ): [HASURA_providers!]!

  """
  fetch aggregated fields from the table: "providers"
  """
  providers_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_providers_order_by!]

    """filter the rows returned"""
    where: HASURA_providers_bool_exp
  ): HASURA_providers_aggregate!

  """fetch data from the table: "providers" using primary key columns"""
  providers_by_pk(id: HASURA_uuid!): HASURA_providers

  """
  fetch data from the table: "services"
  """
  services(
    """distinct select on columns"""
    distinct_on: [HASURA_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_services_order_by!]

    """filter the rows returned"""
    where: HASURA_services_bool_exp
  ): [HASURA_services!]!

  """
  fetch aggregated fields from the table: "services"
  """
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_services_order_by!]

    """filter the rows returned"""
    where: HASURA_services_bool_exp
  ): HASURA_services_aggregate!

  """fetch data from the table: "services" using primary key columns"""
  services_by_pk(id: HASURA_uuid!): HASURA_services

  """
  fetch data from the table: "supplier_type"
  """
  supplier_type(
    """distinct select on columns"""
    distinct_on: [HASURA_supplier_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_supplier_type_order_by!]

    """filter the rows returned"""
    where: HASURA_supplier_type_bool_exp
  ): [HASURA_supplier_type!]!

  """
  fetch aggregated fields from the table: "supplier_type"
  """
  supplier_type_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_supplier_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_supplier_type_order_by!]

    """filter the rows returned"""
    where: HASURA_supplier_type_bool_exp
  ): HASURA_supplier_type_aggregate!

  """fetch data from the table: "supplier_type" using primary key columns"""
  supplier_type_by_pk(id: String!): HASURA_supplier_type

  """
  fetch data from the table: "suppliers"
  """
  suppliers(
    """distinct select on columns"""
    distinct_on: [HASURA_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_suppliers_order_by!]

    """filter the rows returned"""
    where: HASURA_suppliers_bool_exp
  ): [HASURA_suppliers!]!

  """
  fetch aggregated fields from the table: "suppliers"
  """
  suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_suppliers_order_by!]

    """filter the rows returned"""
    where: HASURA_suppliers_bool_exp
  ): HASURA_suppliers_aggregate!

  """fetch data from the table: "suppliers" using primary key columns"""
  suppliers_by_pk(id: HASURA_uuid!): HASURA_suppliers

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [HASURA_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_users_order_by!]

    """filter the rows returned"""
    where: HASURA_users_bool_exp
  ): [HASURA_users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_users_order_by!]

    """filter the rows returned"""
    where: HASURA_users_bool_exp
  ): HASURA_users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): HASURA_users
}

type HASURA_AggregateAsset {
  count: Int!
}

type HASURA_AggregateBlog {
  count: Int!
}

type HASURA_AggregatePage {
  count: Int!
}

type HASURA_Asset implements HASURA_Node {
  createdAt: HASURA_DateTime!
  fileName: String!
  handle: String!
  height: Float
  id: ID!
  imageBlog(after: String, before: String, first: Int, last: Int, orderBy: HASURA_BlogOrderByInput, skip: Int, where: HASURA_BlogWhereInput): [HASURA_Blog!]
  imagePage(after: String, before: String, first: Int, last: Int, orderBy: HASURA_PageOrderByInput, skip: Int, where: HASURA_PageWhereInput): [HASURA_Page!]
  mimeType: String
  size: Float
  status: HASURA_Status!
  updatedAt: HASURA_DateTime!

  """Get the url for the asset with provided transformations applied."""
  url(transformation: HASURA_AssetTransformationInput): String!
  width: Float
  urlSharp: File
}

"""A connection to a list of items."""
type HASURA_AssetConnection {
  aggregate: HASURA_AggregateAsset!

  """A list of edges."""
  edges: [HASURA_AssetEdge]!

  """Information to aid in pagination."""
  pageInfo: HASURA_PageInfo!
}

input HASURA_AssetCreateInput {
  fileName: String!
  handle: String!
  height: Float
  imageBlog: HASURA_BlogCreateManyWithoutImageInput
  imagePage: HASURA_PageCreateManyWithoutImageInput
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

input HASURA_AssetCreateOneWithoutImageBlogInput {
  connect: HASURA_AssetWhereUniqueInput
  create: HASURA_AssetCreateWithoutImageBlogInput
  upload: HASURA_AssetUploadWithoutImageBlogInput
}

input HASURA_AssetCreateOneWithoutImagePageInput {
  connect: HASURA_AssetWhereUniqueInput
  create: HASURA_AssetCreateWithoutImagePageInput
  upload: HASURA_AssetUploadWithoutImagePageInput
}

input HASURA_AssetCreateWithoutImageBlogInput {
  fileName: String!
  handle: String!
  height: Float
  imagePage: HASURA_PageCreateManyWithoutImageInput
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

input HASURA_AssetCreateWithoutImagePageInput {
  fileName: String!
  handle: String!
  height: Float
  imageBlog: HASURA_BlogCreateManyWithoutImageInput
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

"""An edge in a connection."""
type HASURA_AssetEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: HASURA_Asset!
}

enum HASURA_AssetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  fileName_ASC
  fileName_DESC
  handle_ASC
  handle_DESC
  height_ASC
  height_DESC
  id_ASC
  id_DESC
  mimeType_ASC
  mimeType_DESC
  size_ASC
  size_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  width_ASC
  width_DESC
}

type HASURA_AssetPreviousValues {
  createdAt: HASURA_DateTime!
  fileName: String!
  handle: String!
  height: Float
  id: ID!
  mimeType: String
  size: Float
  status: HASURA_Status!
  updatedAt: HASURA_DateTime!
  width: Float
}

type HASURA_AssetSubscriptionPayload {
  mutation: HASURA_MutationType!
  node: HASURA_Asset
  previousValues: HASURA_AssetPreviousValues
  updatedFields: [String!]
}

input HASURA_AssetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_AssetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_AssetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_AssetSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [HASURA_MutationType!]
  node: HASURA_AssetWhereInput

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
}

"""Transformations for Assets"""
input HASURA_AssetTransformationInput {
  document: HASURA_DocumentTransformationInput
  image: HASURA_ImageTransformationInput

  """
  Pass `true` if you want to validate the passed transformation parameters
  """
  validateOptions: Boolean = false
}

input HASURA_AssetUpdateInput {
  fileName: String
  handle: String
  height: Float
  imageBlog: HASURA_BlogUpdateManyWithoutImageInput
  imagePage: HASURA_PageUpdateManyWithoutImageInput
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

input HASURA_AssetUpdateManyMutationInput {
  fileName: String
  handle: String
  height: Float
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

input HASURA_AssetUpdateOneWithoutImageBlogInput {
  connect: HASURA_AssetWhereUniqueInput
  create: HASURA_AssetCreateWithoutImageBlogInput
  delete: Boolean
  disconnect: Boolean
  update: HASURA_AssetUpdateWithoutImageBlogDataInput
  upsert: HASURA_AssetUpsertWithoutImageBlogInput
}

input HASURA_AssetUpdateOneWithoutImagePageInput {
  connect: HASURA_AssetWhereUniqueInput
  create: HASURA_AssetCreateWithoutImagePageInput
  delete: Boolean
  disconnect: Boolean
  update: HASURA_AssetUpdateWithoutImagePageDataInput
  upsert: HASURA_AssetUpsertWithoutImagePageInput
}

input HASURA_AssetUpdateWithoutImageBlogDataInput {
  fileName: String
  handle: String
  height: Float
  imagePage: HASURA_PageUpdateManyWithoutImageInput
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

input HASURA_AssetUpdateWithoutImagePageDataInput {
  fileName: String
  handle: String
  height: Float
  imageBlog: HASURA_BlogUpdateManyWithoutImageInput
  mimeType: String
  size: Float
  status: HASURA_Status
  width: Float
}

input HASURA_AssetUploadInput {
  imageBlog: HASURA_BlogCreateManyWithoutImageInput
  imagePage: HASURA_PageCreateManyWithoutImageInput
  status: HASURA_Status
  url: String!
}

input HASURA_AssetUploadWithoutImageBlogInput {
  imagePage: HASURA_PageCreateManyWithoutImageInput
  status: HASURA_Status
  url: String!
}

input HASURA_AssetUploadWithoutImagePageInput {
  imageBlog: HASURA_BlogCreateManyWithoutImageInput
  status: HASURA_Status
  url: String!
}

input HASURA_AssetUpsertWithoutImageBlogInput {
  create: HASURA_AssetCreateWithoutImageBlogInput!
  update: HASURA_AssetUpdateWithoutImageBlogDataInput!
}

input HASURA_AssetUpsertWithoutImagePageInput {
  create: HASURA_AssetCreateWithoutImagePageInput!
  update: HASURA_AssetUpdateWithoutImagePageDataInput!
}

input HASURA_AssetWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_AssetWhereInput!]
  _search: String
  createdAt: HASURA_DateTime

  """All values greater than the given value."""
  createdAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  createdAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  createdAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  createdAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  createdAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [HASURA_DateTime!]
  fileName: String

  """All values containing the given string."""
  fileName_contains: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values greater than the given value."""
  fileName_gt: String

  """All values greater than or equal the given value."""
  fileName_gte: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values less than the given value."""
  fileName_lt: String

  """All values less than or equal the given value."""
  fileName_lte: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values not ending with the given string."""
  fileName_not_ends_with: String

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values starting with the given string."""
  fileName_starts_with: String
  handle: String

  """All values containing the given string."""
  handle_contains: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values greater than the given value."""
  handle_gt: String

  """All values greater than or equal the given value."""
  handle_gte: String

  """All values that are contained in given list."""
  handle_in: [String!]

  """All values less than the given value."""
  handle_lt: String

  """All values less than or equal the given value."""
  handle_lte: String

  """All values that are not equal to given value."""
  handle_not: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values not ending with the given string."""
  handle_not_ends_with: String

  """All values that are not contained in given list."""
  handle_not_in: [String!]

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values starting with the given string."""
  handle_starts_with: String
  height: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float

  """All values that are contained in given list."""
  height_in: [Float!]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are not contained in given list."""
  height_not_in: [Float!]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  imageBlog_every: HASURA_BlogWhereInput
  imageBlog_none: HASURA_BlogWhereInput
  imageBlog_some: HASURA_BlogWhereInput
  imagePage_every: HASURA_PageWhereInput
  imagePage_none: HASURA_PageWhereInput
  imagePage_some: HASURA_PageWhereInput
  mimeType: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values greater than the given value."""
  mimeType_gt: String

  """All values greater than or equal the given value."""
  mimeType_gte: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values less than the given value."""
  mimeType_lt: String

  """All values less than or equal the given value."""
  mimeType_lte: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values not ending with the given string."""
  mimeType_not_ends_with: String

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values starting with the given string."""
  mimeType_starts_with: String
  size: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are not contained in given list."""
  size_not_in: [Float!]
  status: HASURA_Status

  """All values that are contained in given list."""
  status_in: [HASURA_Status!]

  """All values that are not equal to given value."""
  status_not: HASURA_Status

  """All values that are not contained in given list."""
  status_not_in: [HASURA_Status!]
  updatedAt: HASURA_DateTime

  """All values greater than the given value."""
  updatedAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  updatedAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  updatedAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  updatedAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [HASURA_DateTime!]
  width: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float

  """All values that are contained in given list."""
  width_in: [Float!]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are not contained in given list."""
  width_not_in: [Float!]
}

input HASURA_AssetWhereUniqueInput {
  handle: String
  id: ID
}

type HASURA_BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: HASURA_Long!
}

type HASURA_Blog implements HASURA_Node {
  content: HASURA_RichText
  createdAt: HASURA_DateTime!
  id: ID!
  image: HASURA_Asset
  slug: String!
  status: HASURA_Status!
  summary: String!
  title: String!
  updatedAt: HASURA_DateTime!
}

"""A connection to a list of items."""
type HASURA_BlogConnection {
  aggregate: HASURA_AggregateBlog!

  """A list of edges."""
  edges: [HASURA_BlogEdge]!

  """Information to aid in pagination."""
  pageInfo: HASURA_PageInfo!
}

input HASURA_BlogCreateInput {
  content: HASURA_RichTextAST
  image: HASURA_AssetCreateOneWithoutImageBlogInput
  slug: String!
  status: HASURA_Status
  summary: String!
  title: String!
}

input HASURA_BlogCreateManyWithoutImageInput {
  connect: [HASURA_BlogWhereUniqueInput!]
  create: [HASURA_BlogCreateWithoutImageInput!]
}

input HASURA_BlogCreateWithoutImageInput {
  content: HASURA_RichTextAST
  slug: String!
  status: HASURA_Status
  summary: String!
  title: String!
}

"""An edge in a connection."""
type HASURA_BlogEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: HASURA_Blog!
}

enum HASURA_BlogOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  status_ASC
  status_DESC
  summary_ASC
  summary_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HASURA_BlogPreviousValues {
  content: HASURA_RichText
  createdAt: HASURA_DateTime!
  id: ID!
  slug: String!
  status: HASURA_Status!
  summary: String!
  title: String!
  updatedAt: HASURA_DateTime!
}

input HASURA_BlogScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_BlogScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_BlogScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_BlogScalarWhereInput!]
  _search: String
  createdAt: HASURA_DateTime

  """All values greater than the given value."""
  createdAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  createdAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  createdAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  createdAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  createdAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [HASURA_DateTime!]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string."""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  status: HASURA_Status

  """All values that are contained in given list."""
  status_in: [HASURA_Status!]

  """All values that are not equal to given value."""
  status_not: HASURA_Status

  """All values that are not contained in given list."""
  status_not_in: [HASURA_Status!]
  summary: String

  """All values containing the given string."""
  summary_contains: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values not ending with the given string."""
  summary_not_ends_with: String

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values starting with the given string."""
  summary_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values that are not equal to given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string."""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: HASURA_DateTime

  """All values greater than the given value."""
  updatedAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  updatedAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  updatedAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  updatedAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [HASURA_DateTime!]
}

type HASURA_BlogSubscriptionPayload {
  mutation: HASURA_MutationType!
  node: HASURA_Blog
  previousValues: HASURA_BlogPreviousValues
  updatedFields: [String!]
}

input HASURA_BlogSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_BlogSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_BlogSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_BlogSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [HASURA_MutationType!]
  node: HASURA_BlogWhereInput

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
}

input HASURA_BlogUpdateInput {
  content: HASURA_RichTextAST
  image: HASURA_AssetUpdateOneWithoutImageBlogInput
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_BlogUpdateManyDataInput {
  content: HASURA_RichTextAST
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_BlogUpdateManyMutationInput {
  content: HASURA_RichTextAST
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_BlogUpdateManyWithoutImageInput {
  connect: [HASURA_BlogWhereUniqueInput!]
  create: [HASURA_BlogCreateWithoutImageInput!]
  delete: [HASURA_BlogWhereUniqueInput!]
  deleteMany: [HASURA_BlogScalarWhereInput!]
  disconnect: [HASURA_BlogWhereUniqueInput!]
  set: [HASURA_BlogWhereUniqueInput!]
  update: [HASURA_BlogUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [HASURA_BlogUpdateManyWithWhereNestedInput!]
  upsert: [HASURA_BlogUpsertWithWhereUniqueWithoutImageInput!]
}

input HASURA_BlogUpdateManyWithWhereNestedInput {
  data: HASURA_BlogUpdateManyDataInput!
  where: HASURA_BlogScalarWhereInput!
}

input HASURA_BlogUpdateWithoutImageDataInput {
  content: HASURA_RichTextAST
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_BlogUpdateWithWhereUniqueWithoutImageInput {
  data: HASURA_BlogUpdateWithoutImageDataInput!
  where: HASURA_BlogWhereUniqueInput!
}

input HASURA_BlogUpsertWithWhereUniqueWithoutImageInput {
  create: HASURA_BlogCreateWithoutImageInput!
  update: HASURA_BlogUpdateWithoutImageDataInput!
  where: HASURA_BlogWhereUniqueInput!
}

input HASURA_BlogWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_BlogWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_BlogWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_BlogWhereInput!]
  _search: String
  createdAt: HASURA_DateTime

  """All values greater than the given value."""
  createdAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  createdAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  createdAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  createdAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  createdAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [HASURA_DateTime!]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image: HASURA_AssetWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string."""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  status: HASURA_Status

  """All values that are contained in given list."""
  status_in: [HASURA_Status!]

  """All values that are not equal to given value."""
  status_not: HASURA_Status

  """All values that are not contained in given list."""
  status_not_in: [HASURA_Status!]
  summary: String

  """All values containing the given string."""
  summary_contains: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values not ending with the given string."""
  summary_not_ends_with: String

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values starting with the given string."""
  summary_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values that are not equal to given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string."""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: HASURA_DateTime

  """All values greater than the given value."""
  updatedAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  updatedAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  updatedAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  updatedAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [HASURA_DateTime!]
}

input HASURA_BlogWhereUniqueInput {
  id: ID
  slug: String
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input HASURA_Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "categories"
"""
type HASURA_categories {
  id: HASURA_uuid!
  name: String!

  """An array relationship"""
  services(
    """distinct select on columns"""
    distinct_on: [HASURA_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_services_order_by!]

    """filter the rows returned"""
    where: HASURA_services_bool_exp
  ): [HASURA_services!]!

  """An aggregated array relationship"""
  services_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_services_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_services_order_by!]

    """filter the rows returned"""
    where: HASURA_services_bool_exp
  ): HASURA_services_aggregate!
}

"""
aggregated selection of "categories"
"""
type HASURA_categories_aggregate {
  aggregate: HASURA_categories_aggregate_fields
  nodes: [HASURA_categories!]!
}

"""
aggregate fields of "categories"
"""
type HASURA_categories_aggregate_fields {
  count(columns: [HASURA_categories_select_column!], distinct: Boolean): Int
  max: HASURA_categories_max_fields
  min: HASURA_categories_min_fields
}

"""
order by aggregate values of table "categories"
"""
input HASURA_categories_aggregate_order_by {
  count: HASURA_order_by
  max: HASURA_categories_max_order_by
  min: HASURA_categories_min_order_by
}

"""
Boolean expression to filter rows from the table "categories". All fields are combined with a logical 'AND'.
"""
input HASURA_categories_bool_exp {
  _and: [HASURA_categories_bool_exp]
  _not: HASURA_categories_bool_exp
  _or: [HASURA_categories_bool_exp]
  id: HASURA_uuid_comparison_exp
  name: HASURA_String_comparison_exp
  services: HASURA_services_bool_exp
}

"""aggregate max on columns"""
type HASURA_categories_max_fields {
  name: String
}

"""
order by max() on columns of table "categories"
"""
input HASURA_categories_max_order_by {
  name: HASURA_order_by
}

"""aggregate min on columns"""
type HASURA_categories_min_fields {
  name: String
}

"""
order by min() on columns of table "categories"
"""
input HASURA_categories_min_order_by {
  name: HASURA_order_by
}

"""
ordering options when selecting data from "categories"
"""
input HASURA_categories_order_by {
  id: HASURA_order_by
  name: HASURA_order_by
  services_aggregate: HASURA_services_aggregate_order_by
}

"""
select columns of table "categories"
"""
enum HASURA_categories_select_column {
  """column name"""
  id

  """column name"""
  name
}

scalar HASURA_date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input HASURA_date_comparison_exp {
  _eq: HASURA_date
  _gt: HASURA_date
  _gte: HASURA_date
  _in: [HASURA_date!]
  _is_null: Boolean
  _lt: HASURA_date
  _lte: HASURA_date
  _neq: HASURA_date
  _nin: [HASURA_date!]
}

scalar HASURA_DateTime

enum HASURA_DocumentFileTypes {
  doc
  docx
  html
  jpg
  odp
  ods
  odt
  pdf
  png
  ppt
  pptx
  svg
  txt
  webp
  xls
  xlsx
}

input HASURA_DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: HASURA_DocumentFileTypes
}

"""Transformations for Documents"""
input HASURA_DocumentTransformationInput {
  """Changes the output for the file."""
  output: HASURA_DocumentOutputInput
}

enum HASURA_ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any
  parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
  will not scale the image if the image is smaller than the output size.
  """
  max

  """
  Resizes the image to fit the specified parameters exactly by scaling the image
  to the desired size. The aspect ratio of the image is not respected and the
  image can be distorted using this method.
  """
  scale
}

input HASURA_ImageResizeInput {
  """The default value for the fit parameter is fit:clip."""
  fit: HASURA_ImageFit

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int
}

"""Transformations for Images"""
input HASURA_ImageTransformationInput {
  """Resizes the image"""
  resize: HASURA_ImageResizeInput
}

"""Raw JSON value"""
scalar HASURA_Json

scalar HASURA_jsonb

"""
expression to compare columns of type jsonb. All fields are combined with logical 'AND'.
"""
input HASURA_jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: HASURA_jsonb

  """does the column contain the given json value at the top level"""
  _contains: HASURA_jsonb
  _eq: HASURA_jsonb
  _gt: HASURA_jsonb
  _gte: HASURA_jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [HASURA_jsonb!]
  _is_null: Boolean
  _lt: HASURA_jsonb
  _lte: HASURA_jsonb
  _neq: HASURA_jsonb
  _nin: [HASURA_jsonb!]
}

enum HASURA_Locale {
  EN
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar HASURA_Long

type HASURA_Mutation {
  createAsset(data: HASURA_AssetCreateInput!): HASURA_Asset!
  createBlog(data: HASURA_BlogCreateInput!): HASURA_Blog!
  createPage(data: HASURA_PageCreateInput!): HASURA_Page!
  deleteAsset(where: HASURA_AssetWhereUniqueInput!): HASURA_Asset
  deleteBlog(where: HASURA_BlogWhereUniqueInput!): HASURA_Blog
  deleteManyAssets(where: HASURA_AssetWhereInput): HASURA_BatchPayload!
  deleteManyBlogs(where: HASURA_BlogWhereInput): HASURA_BatchPayload!
  deleteManyPages(where: HASURA_PageWhereInput): HASURA_BatchPayload!
  deletePage(where: HASURA_PageWhereUniqueInput!): HASURA_Page
  updateAsset(data: HASURA_AssetUpdateInput!, where: HASURA_AssetWhereUniqueInput!): HASURA_Asset
  updateBlog(data: HASURA_BlogUpdateInput!, where: HASURA_BlogWhereUniqueInput!): HASURA_Blog
  updateManyAssets(data: HASURA_AssetUpdateManyMutationInput!, where: HASURA_AssetWhereInput): HASURA_BatchPayload!
  updateManyBlogs(data: HASURA_BlogUpdateManyMutationInput!, where: HASURA_BlogWhereInput): HASURA_BatchPayload!
  updateManyPages(data: HASURA_PageUpdateManyMutationInput!, where: HASURA_PageWhereInput): HASURA_BatchPayload!
  updatePage(data: HASURA_PageUpdateInput!, where: HASURA_PageWhereUniqueInput!): HASURA_Page
  uploadAsset(data: HASURA_AssetUploadInput!): HASURA_Asset!
  upsertAsset(create: HASURA_AssetCreateInput!, update: HASURA_AssetUpdateInput!, where: HASURA_AssetWhereUniqueInput!): HASURA_Asset!
  upsertBlog(create: HASURA_BlogCreateInput!, update: HASURA_BlogUpdateInput!, where: HASURA_BlogWhereUniqueInput!): HASURA_Blog!
  upsertPage(create: HASURA_PageCreateInput!, update: HASURA_PageUpdateInput!, where: HASURA_PageWhereUniqueInput!): HASURA_Page!
}

enum HASURA_MutationType {
  CREATED
  DELETED
  UPDATED
}

"""An object with an ID"""
interface HASURA_Node {
  """The id of the object."""
  id: ID!
}

"""column ordering options"""
enum HASURA_order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

type HASURA_Page implements HASURA_Node {
  content: HASURA_RichText
  createdAt: HASURA_DateTime!
  id: ID!
  image: HASURA_Asset
  slug: String!
  status: HASURA_Status!
  summary: String!
  title: String!
  updatedAt: HASURA_DateTime!
}

"""A connection to a list of items."""
type HASURA_PageConnection {
  aggregate: HASURA_AggregatePage!

  """A list of edges."""
  edges: [HASURA_PageEdge]!

  """Information to aid in pagination."""
  pageInfo: HASURA_PageInfo!
}

input HASURA_PageCreateInput {
  content: HASURA_RichTextAST
  image: HASURA_AssetCreateOneWithoutImagePageInput
  slug: String!
  status: HASURA_Status
  summary: String!
  title: String!
}

input HASURA_PageCreateManyWithoutImageInput {
  connect: [HASURA_PageWhereUniqueInput!]
  create: [HASURA_PageCreateWithoutImageInput!]
}

input HASURA_PageCreateWithoutImageInput {
  content: HASURA_RichTextAST
  slug: String!
  status: HASURA_Status
  summary: String!
  title: String!
}

"""An edge in a connection."""
type HASURA_PageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: HASURA_Page!
}

"""Information about pagination in a connection."""
type HASURA_PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum HASURA_PageOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  slug_ASC
  slug_DESC
  status_ASC
  status_DESC
  summary_ASC
  summary_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HASURA_PagePreviousValues {
  content: HASURA_RichText
  createdAt: HASURA_DateTime!
  id: ID!
  slug: String!
  status: HASURA_Status!
  summary: String!
  title: String!
  updatedAt: HASURA_DateTime!
}

input HASURA_PageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_PageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_PageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_PageScalarWhereInput!]
  _search: String
  createdAt: HASURA_DateTime

  """All values greater than the given value."""
  createdAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  createdAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  createdAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  createdAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  createdAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [HASURA_DateTime!]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string."""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  status: HASURA_Status

  """All values that are contained in given list."""
  status_in: [HASURA_Status!]

  """All values that are not equal to given value."""
  status_not: HASURA_Status

  """All values that are not contained in given list."""
  status_not_in: [HASURA_Status!]
  summary: String

  """All values containing the given string."""
  summary_contains: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values not ending with the given string."""
  summary_not_ends_with: String

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values starting with the given string."""
  summary_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values that are not equal to given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string."""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: HASURA_DateTime

  """All values greater than the given value."""
  updatedAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  updatedAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  updatedAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  updatedAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [HASURA_DateTime!]
}

type HASURA_PageSubscriptionPayload {
  mutation: HASURA_MutationType!
  node: HASURA_Page
  previousValues: HASURA_PagePreviousValues
  updatedFields: [String!]
}

input HASURA_PageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_PageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_PageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_PageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [HASURA_MutationType!]
  node: HASURA_PageWhereInput

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
}

input HASURA_PageUpdateInput {
  content: HASURA_RichTextAST
  image: HASURA_AssetUpdateOneWithoutImagePageInput
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_PageUpdateManyDataInput {
  content: HASURA_RichTextAST
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_PageUpdateManyMutationInput {
  content: HASURA_RichTextAST
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_PageUpdateManyWithoutImageInput {
  connect: [HASURA_PageWhereUniqueInput!]
  create: [HASURA_PageCreateWithoutImageInput!]
  delete: [HASURA_PageWhereUniqueInput!]
  deleteMany: [HASURA_PageScalarWhereInput!]
  disconnect: [HASURA_PageWhereUniqueInput!]
  set: [HASURA_PageWhereUniqueInput!]
  update: [HASURA_PageUpdateWithWhereUniqueWithoutImageInput!]
  updateMany: [HASURA_PageUpdateManyWithWhereNestedInput!]
  upsert: [HASURA_PageUpsertWithWhereUniqueWithoutImageInput!]
}

input HASURA_PageUpdateManyWithWhereNestedInput {
  data: HASURA_PageUpdateManyDataInput!
  where: HASURA_PageScalarWhereInput!
}

input HASURA_PageUpdateWithoutImageDataInput {
  content: HASURA_RichTextAST
  slug: String
  status: HASURA_Status
  summary: String
  title: String
}

input HASURA_PageUpdateWithWhereUniqueWithoutImageInput {
  data: HASURA_PageUpdateWithoutImageDataInput!
  where: HASURA_PageWhereUniqueInput!
}

input HASURA_PageUpsertWithWhereUniqueWithoutImageInput {
  create: HASURA_PageCreateWithoutImageInput!
  update: HASURA_PageUpdateWithoutImageDataInput!
  where: HASURA_PageWhereUniqueInput!
}

input HASURA_PageWhereInput {
  """Logical AND on all given filters."""
  AND: [HASURA_PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HASURA_PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [HASURA_PageWhereInput!]
  _search: String
  createdAt: HASURA_DateTime

  """All values greater than the given value."""
  createdAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  createdAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  createdAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  createdAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  createdAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [HASURA_DateTime!]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image: HASURA_AssetWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string."""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  status: HASURA_Status

  """All values that are contained in given list."""
  status_in: [HASURA_Status!]

  """All values that are not equal to given value."""
  status_not: HASURA_Status

  """All values that are not contained in given list."""
  status_not_in: [HASURA_Status!]
  summary: String

  """All values containing the given string."""
  summary_contains: String

  """All values ending with the given string."""
  summary_ends_with: String

  """All values greater than the given value."""
  summary_gt: String

  """All values greater than or equal the given value."""
  summary_gte: String

  """All values that are contained in given list."""
  summary_in: [String!]

  """All values less than the given value."""
  summary_lt: String

  """All values less than or equal the given value."""
  summary_lte: String

  """All values that are not equal to given value."""
  summary_not: String

  """All values not containing the given string."""
  summary_not_contains: String

  """All values not ending with the given string."""
  summary_not_ends_with: String

  """All values that are not contained in given list."""
  summary_not_in: [String!]

  """All values not starting with the given string."""
  summary_not_starts_with: String

  """All values starting with the given string."""
  summary_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values that are not equal to given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string."""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: HASURA_DateTime

  """All values greater than the given value."""
  updatedAt_gt: HASURA_DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: HASURA_DateTime

  """All values that are contained in given list."""
  updatedAt_in: [HASURA_DateTime!]

  """All values less than the given value."""
  updatedAt_lt: HASURA_DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: HASURA_DateTime

  """All values that are not equal to given value."""
  updatedAt_not: HASURA_DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [HASURA_DateTime!]
}

input HASURA_PageWhereUniqueInput {
  id: ID
  slug: String
  title: String
}

"""
columns and relationships of "providers"
"""
type HASURA_providers {
  address: String!
  capacity: String
  coordinates(
    """JSON select path"""
    path: String
  ): HASURA_jsonb
  district: String!
  email: String
  id: HASURA_uuid!
  license_by: String
  license_date_5years: HASURA_date
  license_date_provisional: HASURA_date!
  license_no: String
  location: String!
  name: String!

  """An object relationship"""
  service: HASURA_services!
  service_id: HASURA_uuid!

  """An object relationship"""
  supplier: HASURA_suppliers!
  supplier_id: HASURA_uuid!
  type_id: HASURA_smallint
}

"""
aggregated selection of "providers"
"""
type HASURA_providers_aggregate {
  aggregate: HASURA_providers_aggregate_fields
  nodes: [HASURA_providers!]!
}

"""
aggregate fields of "providers"
"""
type HASURA_providers_aggregate_fields {
  avg: HASURA_providers_avg_fields
  count(columns: [HASURA_providers_select_column!], distinct: Boolean): Int
  max: HASURA_providers_max_fields
  min: HASURA_providers_min_fields
  stddev: HASURA_providers_stddev_fields
  stddev_pop: HASURA_providers_stddev_pop_fields
  stddev_samp: HASURA_providers_stddev_samp_fields
  sum: HASURA_providers_sum_fields
  var_pop: HASURA_providers_var_pop_fields
  var_samp: HASURA_providers_var_samp_fields
  variance: HASURA_providers_variance_fields
}

"""
order by aggregate values of table "providers"
"""
input HASURA_providers_aggregate_order_by {
  avg: HASURA_providers_avg_order_by
  count: HASURA_order_by
  max: HASURA_providers_max_order_by
  min: HASURA_providers_min_order_by
  stddev: HASURA_providers_stddev_order_by
  stddev_pop: HASURA_providers_stddev_pop_order_by
  stddev_samp: HASURA_providers_stddev_samp_order_by
  sum: HASURA_providers_sum_order_by
  var_pop: HASURA_providers_var_pop_order_by
  var_samp: HASURA_providers_var_samp_order_by
  variance: HASURA_providers_variance_order_by
}

"""aggregate avg on columns"""
type HASURA_providers_avg_fields {
  type_id: Float
}

"""
order by avg() on columns of table "providers"
"""
input HASURA_providers_avg_order_by {
  type_id: HASURA_order_by
}

"""
Boolean expression to filter rows from the table "providers". All fields are combined with a logical 'AND'.
"""
input HASURA_providers_bool_exp {
  _and: [HASURA_providers_bool_exp]
  _not: HASURA_providers_bool_exp
  _or: [HASURA_providers_bool_exp]
  address: HASURA_String_comparison_exp
  capacity: HASURA_String_comparison_exp
  coordinates: HASURA_jsonb_comparison_exp
  district: HASURA_String_comparison_exp
  email: HASURA_String_comparison_exp
  id: HASURA_uuid_comparison_exp
  license_by: HASURA_String_comparison_exp
  license_date_5years: HASURA_date_comparison_exp
  license_date_provisional: HASURA_date_comparison_exp
  license_no: HASURA_String_comparison_exp
  location: HASURA_String_comparison_exp
  name: HASURA_String_comparison_exp
  service: HASURA_services_bool_exp
  service_id: HASURA_uuid_comparison_exp
  supplier: HASURA_suppliers_bool_exp
  supplier_id: HASURA_uuid_comparison_exp
  type_id: HASURA_smallint_comparison_exp
}

"""aggregate max on columns"""
type HASURA_providers_max_fields {
  address: String
  capacity: String
  district: String
  email: String
  license_by: String
  license_date_5years: HASURA_date
  license_date_provisional: HASURA_date
  license_no: String
  location: String
  name: String
  type_id: HASURA_smallint
}

"""
order by max() on columns of table "providers"
"""
input HASURA_providers_max_order_by {
  address: HASURA_order_by
  capacity: HASURA_order_by
  district: HASURA_order_by
  email: HASURA_order_by
  license_by: HASURA_order_by
  license_date_5years: HASURA_order_by
  license_date_provisional: HASURA_order_by
  license_no: HASURA_order_by
  location: HASURA_order_by
  name: HASURA_order_by
  type_id: HASURA_order_by
}

"""aggregate min on columns"""
type HASURA_providers_min_fields {
  address: String
  capacity: String
  district: String
  email: String
  license_by: String
  license_date_5years: HASURA_date
  license_date_provisional: HASURA_date
  license_no: String
  location: String
  name: String
  type_id: HASURA_smallint
}

"""
order by min() on columns of table "providers"
"""
input HASURA_providers_min_order_by {
  address: HASURA_order_by
  capacity: HASURA_order_by
  district: HASURA_order_by
  email: HASURA_order_by
  license_by: HASURA_order_by
  license_date_5years: HASURA_order_by
  license_date_provisional: HASURA_order_by
  license_no: HASURA_order_by
  location: HASURA_order_by
  name: HASURA_order_by
  type_id: HASURA_order_by
}

"""
ordering options when selecting data from "providers"
"""
input HASURA_providers_order_by {
  address: HASURA_order_by
  capacity: HASURA_order_by
  coordinates: HASURA_order_by
  district: HASURA_order_by
  email: HASURA_order_by
  id: HASURA_order_by
  license_by: HASURA_order_by
  license_date_5years: HASURA_order_by
  license_date_provisional: HASURA_order_by
  license_no: HASURA_order_by
  location: HASURA_order_by
  name: HASURA_order_by
  service: HASURA_services_order_by
  service_id: HASURA_order_by
  supplier: HASURA_suppliers_order_by
  supplier_id: HASURA_order_by
  type_id: HASURA_order_by
}

"""
select columns of table "providers"
"""
enum HASURA_providers_select_column {
  """column name"""
  address

  """column name"""
  capacity

  """column name"""
  coordinates

  """column name"""
  district

  """column name"""
  email

  """column name"""
  id

  """column name"""
  license_by

  """column name"""
  license_date_5years

  """column name"""
  license_date_provisional

  """column name"""
  license_no

  """column name"""
  location

  """column name"""
  name

  """column name"""
  service_id

  """column name"""
  supplier_id

  """column name"""
  type_id
}

"""aggregate stddev on columns"""
type HASURA_providers_stddev_fields {
  type_id: Float
}

"""
order by stddev() on columns of table "providers"
"""
input HASURA_providers_stddev_order_by {
  type_id: HASURA_order_by
}

"""aggregate stddev_pop on columns"""
type HASURA_providers_stddev_pop_fields {
  type_id: Float
}

"""
order by stddev_pop() on columns of table "providers"
"""
input HASURA_providers_stddev_pop_order_by {
  type_id: HASURA_order_by
}

"""aggregate stddev_samp on columns"""
type HASURA_providers_stddev_samp_fields {
  type_id: Float
}

"""
order by stddev_samp() on columns of table "providers"
"""
input HASURA_providers_stddev_samp_order_by {
  type_id: HASURA_order_by
}

"""aggregate sum on columns"""
type HASURA_providers_sum_fields {
  type_id: HASURA_smallint
}

"""
order by sum() on columns of table "providers"
"""
input HASURA_providers_sum_order_by {
  type_id: HASURA_order_by
}

"""aggregate var_pop on columns"""
type HASURA_providers_var_pop_fields {
  type_id: Float
}

"""
order by var_pop() on columns of table "providers"
"""
input HASURA_providers_var_pop_order_by {
  type_id: HASURA_order_by
}

"""aggregate var_samp on columns"""
type HASURA_providers_var_samp_fields {
  type_id: Float
}

"""
order by var_samp() on columns of table "providers"
"""
input HASURA_providers_var_samp_order_by {
  type_id: HASURA_order_by
}

"""aggregate variance on columns"""
type HASURA_providers_variance_fields {
  type_id: Float
}

"""
order by variance() on columns of table "providers"
"""
input HASURA_providers_variance_order_by {
  type_id: HASURA_order_by
}

type HASURA_Query {
  asset(where: HASURA_AssetWhereUniqueInput!): HASURA_Asset
  assets(after: String, before: String, first: Int, last: Int, orderBy: HASURA_AssetOrderByInput, skip: Int, where: HASURA_AssetWhereInput): [HASURA_Asset]!
  assetsConnection(after: String, before: String, first: Int, last: Int, orderBy: HASURA_AssetOrderByInput, skip: Int, where: HASURA_AssetWhereInput): HASURA_AssetConnection!
  blog(where: HASURA_BlogWhereUniqueInput!): HASURA_Blog
  blogs(after: String, before: String, first: Int, last: Int, orderBy: HASURA_BlogOrderByInput, skip: Int, where: HASURA_BlogWhereInput): [HASURA_Blog]!
  blogsConnection(after: String, before: String, first: Int, last: Int, orderBy: HASURA_BlogOrderByInput, skip: Int, where: HASURA_BlogWhereInput): HASURA_BlogConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): HASURA_Node
  page(where: HASURA_PageWhereUniqueInput!): HASURA_Page
  pages(after: String, before: String, first: Int, last: Int, orderBy: HASURA_PageOrderByInput, skip: Int, where: HASURA_PageWhereInput): [HASURA_Page]!
  pagesConnection(after: String, before: String, first: Int, last: Int, orderBy: HASURA_PageOrderByInput, skip: Int, where: HASURA_PageWhereInput): HASURA_PageConnection!
}

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type HASURA_RichText {
  html: String
  markdown: String
  raw: HASURA_RichTextAST
  text: String
}

"""Custom scalar representing a Slate rich text AST"""
scalar HASURA_RichTextAST

"""
columns and relationships of "services"
"""
type HASURA_services {
  """An object relationship"""
  category: HASURA_categories
  category_id: HASURA_uuid
  code: String!
  id: HASURA_uuid!
  name: String

  """An array relationship"""
  providers(
    """distinct select on columns"""
    distinct_on: [HASURA_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_providers_order_by!]

    """filter the rows returned"""
    where: HASURA_providers_bool_exp
  ): [HASURA_providers!]!

  """An aggregated array relationship"""
  providers_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_providers_order_by!]

    """filter the rows returned"""
    where: HASURA_providers_bool_exp
  ): HASURA_providers_aggregate!
}

"""
aggregated selection of "services"
"""
type HASURA_services_aggregate {
  aggregate: HASURA_services_aggregate_fields
  nodes: [HASURA_services!]!
}

"""
aggregate fields of "services"
"""
type HASURA_services_aggregate_fields {
  count(columns: [HASURA_services_select_column!], distinct: Boolean): Int
  max: HASURA_services_max_fields
  min: HASURA_services_min_fields
}

"""
order by aggregate values of table "services"
"""
input HASURA_services_aggregate_order_by {
  count: HASURA_order_by
  max: HASURA_services_max_order_by
  min: HASURA_services_min_order_by
}

"""
Boolean expression to filter rows from the table "services". All fields are combined with a logical 'AND'.
"""
input HASURA_services_bool_exp {
  _and: [HASURA_services_bool_exp]
  _not: HASURA_services_bool_exp
  _or: [HASURA_services_bool_exp]
  category: HASURA_categories_bool_exp
  category_id: HASURA_uuid_comparison_exp
  code: HASURA_String_comparison_exp
  id: HASURA_uuid_comparison_exp
  name: HASURA_String_comparison_exp
  providers: HASURA_providers_bool_exp
}

"""aggregate max on columns"""
type HASURA_services_max_fields {
  code: String
  name: String
}

"""
order by max() on columns of table "services"
"""
input HASURA_services_max_order_by {
  code: HASURA_order_by
  name: HASURA_order_by
}

"""aggregate min on columns"""
type HASURA_services_min_fields {
  code: String
  name: String
}

"""
order by min() on columns of table "services"
"""
input HASURA_services_min_order_by {
  code: HASURA_order_by
  name: HASURA_order_by
}

"""
ordering options when selecting data from "services"
"""
input HASURA_services_order_by {
  category: HASURA_categories_order_by
  category_id: HASURA_order_by
  code: HASURA_order_by
  id: HASURA_order_by
  name: HASURA_order_by
  providers_aggregate: HASURA_providers_aggregate_order_by
}

"""
select columns of table "services"
"""
enum HASURA_services_select_column {
  """column name"""
  category_id

  """column name"""
  code

  """column name"""
  id

  """column name"""
  name
}

scalar HASURA_smallint

"""
expression to compare columns of type smallint. All fields are combined with logical 'AND'.
"""
input HASURA_smallint_comparison_exp {
  _eq: HASURA_smallint
  _gt: HASURA_smallint
  _gte: HASURA_smallint
  _in: [HASURA_smallint!]
  _is_null: Boolean
  _lt: HASURA_smallint
  _lte: HASURA_smallint
  _neq: HASURA_smallint
  _nin: [HASURA_smallint!]
}

enum HASURA_Status {
  ARCHIVED
  DRAFT
  PUBLISHED
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input HASURA_String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
columns and relationships of "supplier_type"
"""
type HASURA_supplier_type {
  description: String
  id: String!
  name: String
  private: Boolean!

  """An array relationship"""
  suppliers(
    """distinct select on columns"""
    distinct_on: [HASURA_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_suppliers_order_by!]

    """filter the rows returned"""
    where: HASURA_suppliers_bool_exp
  ): [HASURA_suppliers!]!

  """An aggregated array relationship"""
  suppliers_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_suppliers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_suppliers_order_by!]

    """filter the rows returned"""
    where: HASURA_suppliers_bool_exp
  ): HASURA_suppliers_aggregate!
}

"""
aggregated selection of "supplier_type"
"""
type HASURA_supplier_type_aggregate {
  aggregate: HASURA_supplier_type_aggregate_fields
  nodes: [HASURA_supplier_type!]!
}

"""
aggregate fields of "supplier_type"
"""
type HASURA_supplier_type_aggregate_fields {
  count(columns: [HASURA_supplier_type_select_column!], distinct: Boolean): Int
  max: HASURA_supplier_type_max_fields
  min: HASURA_supplier_type_min_fields
}

"""
order by aggregate values of table "supplier_type"
"""
input HASURA_supplier_type_aggregate_order_by {
  count: HASURA_order_by
  max: HASURA_supplier_type_max_order_by
  min: HASURA_supplier_type_min_order_by
}

"""
Boolean expression to filter rows from the table "supplier_type". All fields are combined with a logical 'AND'.
"""
input HASURA_supplier_type_bool_exp {
  _and: [HASURA_supplier_type_bool_exp]
  _not: HASURA_supplier_type_bool_exp
  _or: [HASURA_supplier_type_bool_exp]
  description: HASURA_String_comparison_exp
  id: HASURA_String_comparison_exp
  name: HASURA_String_comparison_exp
  private: HASURA_Boolean_comparison_exp
  suppliers: HASURA_suppliers_bool_exp
}

"""aggregate max on columns"""
type HASURA_supplier_type_max_fields {
  description: String
  id: String
  name: String
}

"""
order by max() on columns of table "supplier_type"
"""
input HASURA_supplier_type_max_order_by {
  description: HASURA_order_by
  id: HASURA_order_by
  name: HASURA_order_by
}

"""aggregate min on columns"""
type HASURA_supplier_type_min_fields {
  description: String
  id: String
  name: String
}

"""
order by min() on columns of table "supplier_type"
"""
input HASURA_supplier_type_min_order_by {
  description: HASURA_order_by
  id: HASURA_order_by
  name: HASURA_order_by
}

"""
ordering options when selecting data from "supplier_type"
"""
input HASURA_supplier_type_order_by {
  description: HASURA_order_by
  id: HASURA_order_by
  name: HASURA_order_by
  private: HASURA_order_by
  suppliers_aggregate: HASURA_suppliers_aggregate_order_by
}

"""
select columns of table "supplier_type"
"""
enum HASURA_supplier_type_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  private
}

"""
columns and relationships of "suppliers"
"""
type HASURA_suppliers {
  address: String
  certificate_serial_no: String
  city: String
  created_at: HASURA_timestamptz
  cui_cif: String!
  decision_date: HASURA_date
  decision_no: String
  district: String
  id: HASURA_uuid!
  name: String

  """An array relationship"""
  providers(
    """distinct select on columns"""
    distinct_on: [HASURA_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_providers_order_by!]

    """filter the rows returned"""
    where: HASURA_providers_bool_exp
  ): [HASURA_providers!]!

  """An aggregated array relationship"""
  providers_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_providers_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_providers_order_by!]

    """filter the rows returned"""
    where: HASURA_providers_bool_exp
  ): HASURA_providers_aggregate!

  """An object relationship"""
  supplier_type: HASURA_supplier_type
  supplier_type_id: String
  updated_at: HASURA_timestamptz

  """An array relationship"""
  users(
    """distinct select on columns"""
    distinct_on: [HASURA_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_users_order_by!]

    """filter the rows returned"""
    where: HASURA_users_bool_exp
  ): [HASURA_users!]!

  """An aggregated array relationship"""
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [HASURA_users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [HASURA_users_order_by!]

    """filter the rows returned"""
    where: HASURA_users_bool_exp
  ): HASURA_users_aggregate!
}

"""
aggregated selection of "suppliers"
"""
type HASURA_suppliers_aggregate {
  aggregate: HASURA_suppliers_aggregate_fields
  nodes: [HASURA_suppliers!]!
}

"""
aggregate fields of "suppliers"
"""
type HASURA_suppliers_aggregate_fields {
  count(columns: [HASURA_suppliers_select_column!], distinct: Boolean): Int
  max: HASURA_suppliers_max_fields
  min: HASURA_suppliers_min_fields
}

"""
order by aggregate values of table "suppliers"
"""
input HASURA_suppliers_aggregate_order_by {
  count: HASURA_order_by
  max: HASURA_suppliers_max_order_by
  min: HASURA_suppliers_min_order_by
}

"""
Boolean expression to filter rows from the table "suppliers". All fields are combined with a logical 'AND'.
"""
input HASURA_suppliers_bool_exp {
  _and: [HASURA_suppliers_bool_exp]
  _not: HASURA_suppliers_bool_exp
  _or: [HASURA_suppliers_bool_exp]
  address: HASURA_String_comparison_exp
  certificate_serial_no: HASURA_String_comparison_exp
  city: HASURA_String_comparison_exp
  created_at: HASURA_timestamptz_comparison_exp
  cui_cif: HASURA_String_comparison_exp
  decision_date: HASURA_date_comparison_exp
  decision_no: HASURA_String_comparison_exp
  district: HASURA_String_comparison_exp
  id: HASURA_uuid_comparison_exp
  name: HASURA_String_comparison_exp
  providers: HASURA_providers_bool_exp
  supplier_type: HASURA_supplier_type_bool_exp
  supplier_type_id: HASURA_String_comparison_exp
  updated_at: HASURA_timestamptz_comparison_exp
  users: HASURA_users_bool_exp
}

"""aggregate max on columns"""
type HASURA_suppliers_max_fields {
  address: String
  certificate_serial_no: String
  city: String
  created_at: HASURA_timestamptz
  cui_cif: String
  decision_date: HASURA_date
  decision_no: String
  district: String
  name: String
  supplier_type_id: String
  updated_at: HASURA_timestamptz
}

"""
order by max() on columns of table "suppliers"
"""
input HASURA_suppliers_max_order_by {
  address: HASURA_order_by
  certificate_serial_no: HASURA_order_by
  city: HASURA_order_by
  created_at: HASURA_order_by
  cui_cif: HASURA_order_by
  decision_date: HASURA_order_by
  decision_no: HASURA_order_by
  district: HASURA_order_by
  name: HASURA_order_by
  supplier_type_id: HASURA_order_by
  updated_at: HASURA_order_by
}

"""aggregate min on columns"""
type HASURA_suppliers_min_fields {
  address: String
  certificate_serial_no: String
  city: String
  created_at: HASURA_timestamptz
  cui_cif: String
  decision_date: HASURA_date
  decision_no: String
  district: String
  name: String
  supplier_type_id: String
  updated_at: HASURA_timestamptz
}

"""
order by min() on columns of table "suppliers"
"""
input HASURA_suppliers_min_order_by {
  address: HASURA_order_by
  certificate_serial_no: HASURA_order_by
  city: HASURA_order_by
  created_at: HASURA_order_by
  cui_cif: HASURA_order_by
  decision_date: HASURA_order_by
  decision_no: HASURA_order_by
  district: HASURA_order_by
  name: HASURA_order_by
  supplier_type_id: HASURA_order_by
  updated_at: HASURA_order_by
}

"""
ordering options when selecting data from "suppliers"
"""
input HASURA_suppliers_order_by {
  address: HASURA_order_by
  certificate_serial_no: HASURA_order_by
  city: HASURA_order_by
  created_at: HASURA_order_by
  cui_cif: HASURA_order_by
  decision_date: HASURA_order_by
  decision_no: HASURA_order_by
  district: HASURA_order_by
  id: HASURA_order_by
  name: HASURA_order_by
  providers_aggregate: HASURA_providers_aggregate_order_by
  supplier_type: HASURA_supplier_type_order_by
  supplier_type_id: HASURA_order_by
  updated_at: HASURA_order_by
  users_aggregate: HASURA_users_aggregate_order_by
}

"""
select columns of table "suppliers"
"""
enum HASURA_suppliers_select_column {
  """column name"""
  address

  """column name"""
  certificate_serial_no

  """column name"""
  city

  """column name"""
  created_at

  """column name"""
  cui_cif

  """column name"""
  decision_date

  """column name"""
  decision_no

  """column name"""
  district

  """column name"""
  id

  """column name"""
  name

  """column name"""
  supplier_type_id

  """column name"""
  updated_at
}

scalar HASURA_timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input HASURA_timestamptz_comparison_exp {
  _eq: HASURA_timestamptz
  _gt: HASURA_timestamptz
  _gte: HASURA_timestamptz
  _in: [HASURA_timestamptz!]
  _is_null: Boolean
  _lt: HASURA_timestamptz
  _lte: HASURA_timestamptz
  _neq: HASURA_timestamptz
  _nin: [HASURA_timestamptz!]
}

"""
columns and relationships of "users"
"""
type HASURA_users {
  active: Boolean!
  created_at: HASURA_timestamptz!
  email: String!
  id: String!
  phone: String!

  """An object relationship"""
  supplier: HASURA_suppliers
  supplier_id: HASURA_uuid
  username: String!
}

"""
aggregated selection of "users"
"""
type HASURA_users_aggregate {
  aggregate: HASURA_users_aggregate_fields
  nodes: [HASURA_users!]!
}

"""
aggregate fields of "users"
"""
type HASURA_users_aggregate_fields {
  count(columns: [HASURA_users_select_column!], distinct: Boolean): Int
  max: HASURA_users_max_fields
  min: HASURA_users_min_fields
}

"""
order by aggregate values of table "users"
"""
input HASURA_users_aggregate_order_by {
  count: HASURA_order_by
  max: HASURA_users_max_order_by
  min: HASURA_users_min_order_by
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input HASURA_users_bool_exp {
  _and: [HASURA_users_bool_exp]
  _not: HASURA_users_bool_exp
  _or: [HASURA_users_bool_exp]
  active: HASURA_Boolean_comparison_exp
  created_at: HASURA_timestamptz_comparison_exp
  email: HASURA_String_comparison_exp
  id: HASURA_String_comparison_exp
  phone: HASURA_String_comparison_exp
  supplier: HASURA_suppliers_bool_exp
  supplier_id: HASURA_uuid_comparison_exp
  username: HASURA_String_comparison_exp
}

"""aggregate max on columns"""
type HASURA_users_max_fields {
  created_at: HASURA_timestamptz
  email: String
  id: String
  phone: String
  username: String
}

"""
order by max() on columns of table "users"
"""
input HASURA_users_max_order_by {
  created_at: HASURA_order_by
  email: HASURA_order_by
  id: HASURA_order_by
  phone: HASURA_order_by
  username: HASURA_order_by
}

"""aggregate min on columns"""
type HASURA_users_min_fields {
  created_at: HASURA_timestamptz
  email: String
  id: String
  phone: String
  username: String
}

"""
order by min() on columns of table "users"
"""
input HASURA_users_min_order_by {
  created_at: HASURA_order_by
  email: HASURA_order_by
  id: HASURA_order_by
  phone: HASURA_order_by
  username: HASURA_order_by
}

"""
ordering options when selecting data from "users"
"""
input HASURA_users_order_by {
  active: HASURA_order_by
  created_at: HASURA_order_by
  email: HASURA_order_by
  id: HASURA_order_by
  phone: HASURA_order_by
  supplier: HASURA_suppliers_order_by
  supplier_id: HASURA_order_by
  username: HASURA_order_by
}

"""
select columns of table "users"
"""
enum HASURA_users_select_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  phone

  """column name"""
  supplier_id

  """column name"""
  username
}

scalar HASURA_uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input HASURA_uuid_comparison_exp {
  _eq: HASURA_uuid
  _gt: HASURA_uuid
  _gte: HASURA_uuid
  _in: [HASURA_uuid!]
  _is_null: Boolean
  _lt: HASURA_uuid
  _lte: HASURA_uuid
  _neq: HASURA_uuid
  _nin: [HASURA_uuid!]
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
}

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  resolutions(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResolutions @deprecated(reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes @deprecated(reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resolutions___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  sizes___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  resolutions: ImageSharpResolutionsFilterInput
  fluid: ImageSharpFluidFilterInput
  sizes: ImageSharpSizesFilterInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

input ImageSharpResolutionsFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

input ImageSharpSizesFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Node Interface"""
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, publicURL: StringQueryOperatorInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, resolutions: ImageSharpResolutionsFilterInput, fluid: ImageSharpFluidFilterInput, sizes: ImageSharpSizesFilterInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  graphQlSource(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, typeName: StringQueryOperatorInput, fieldName: StringQueryOperatorInput): GraphQLSource
  allGraphQlSource(filter: GraphQLSourceFilterInput, sort: GraphQLSourceSortInput, skip: Int, limit: Int): GraphQLSourceConnection!
  site(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, buildTime: DateQueryOperatorInput): Site
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  sitePlugin(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  sitePage(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, path: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput, componentPath: StringQueryOperatorInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  hasura: HASURA!
}

type Site implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  siteMetadata___siteTitle
  siteMetadata___siteTitleShort
  siteMetadata___siteDescription
  siteMetadata___siteUrl
  siteMetadata___logo
  siteMetadata___social___twitter
  siteMetadata___social___fbAppId
  port
  host
  polyfill
  pathPrefix
  buildTime
}

input SiteFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  buildTime: DateQueryOperatorInput
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SitePage implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  path: String
  internalComponentName: String
  component: String
  componentChunkName: String
  isCreatedByStatefulCreatePages: Boolean
  pluginCreator: SitePlugin
  pluginCreatorId: String
  componentPath: String
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  path
  internalComponentName
  component
  componentChunkName
  isCreatedByStatefulCreatePages
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___fonts
  pluginCreator___pluginOptions___fonts___family
  pluginCreator___pluginOptions___fonts___subsets
  pluginCreator___pluginOptions___fonts___variants
  pluginCreator___pluginOptions___display
  pluginCreator___pluginOptions___name
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___short_name
  pluginCreator___pluginOptions___start_url
  pluginCreator___pluginOptions___background_color
  pluginCreator___pluginOptions___theme_color
  pluginCreator___pluginOptions___icon
  pluginCreator___pluginOptions___headers___content_type
  pluginCreator___pluginOptions___mergeSecurityHeaders
  pluginCreator___pluginOptions___mergeLinkHeaders
  pluginCreator___pluginOptions___mergeCachingHeaders
  pluginCreator___pluginOptions___generateMatchPathRewrites
  pluginCreator___pluginOptions___cachePublic
  pluginCreator___pluginOptions___linkStyles
  pluginCreator___pluginOptions___preferCanvas
  pluginCreator___pluginOptions___maxWidth
  pluginCreator___pluginOptions___maxHeight
  pluginCreator___pluginOptions___typeName
  pluginCreator___pluginOptions___fieldName
  pluginCreator___pluginOptions___url
  pluginCreator___pluginOptions___refetchInterval
  pluginCreator___pluginOptions___schemaName
  pluginCreator___pluginOptions___imageFieldName
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___author
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
  componentPath
}

input SitePageFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  path: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
  componentPath: StringQueryOperatorInput
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___fonts
  pluginOptions___fonts___family
  pluginOptions___fonts___subsets
  pluginOptions___fonts___variants
  pluginOptions___display
  pluginOptions___name
  pluginOptions___path
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___icon
  pluginOptions___headers___content_type
  pluginOptions___mergeSecurityHeaders
  pluginOptions___mergeLinkHeaders
  pluginOptions___mergeCachingHeaders
  pluginOptions___generateMatchPathRewrites
  pluginOptions___cachePublic
  pluginOptions___linkStyles
  pluginOptions___preferCanvas
  pluginOptions___maxWidth
  pluginOptions___maxHeight
  pluginOptions___typeName
  pluginOptions___fieldName
  pluginOptions___url
  pluginOptions___refetchInterval
  pluginOptions___schemaName
  pluginOptions___imageFieldName
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

input SitePluginFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  author: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
  name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  version: StringQueryOperatorInput
  main: StringQueryOperatorInput
  author: StringQueryOperatorInput
  license: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  keywords: StringQueryOperatorInput
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

type SitePluginPluginOptions {
  fonts: [SitePluginPluginOptionsFonts]
  display: String
  name: String
  path: String
  short_name: String
  start_url: String
  background_color: String
  theme_color: String
  icon: String
  headers: SitePluginPluginOptionsHeaders
  mergeSecurityHeaders: Boolean
  mergeLinkHeaders: Boolean
  mergeCachingHeaders: Boolean
  generateMatchPathRewrites: Boolean
  cachePublic: Boolean
  linkStyles: Boolean
  preferCanvas: Boolean
  maxWidth: String
  maxHeight: Int
  typeName: String
  fieldName: String
  url: String
  refetchInterval: Int
  schemaName: String
  imageFieldName: String
  pathCheck: Boolean
}

input SitePluginPluginOptionsFilterInput {
  fonts: SitePluginPluginOptionsFontsFilterListInput
  display: StringQueryOperatorInput
  name: StringQueryOperatorInput
  path: StringQueryOperatorInput
  short_name: StringQueryOperatorInput
  start_url: StringQueryOperatorInput
  background_color: StringQueryOperatorInput
  theme_color: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  headers: SitePluginPluginOptionsHeadersFilterInput
  mergeSecurityHeaders: BooleanQueryOperatorInput
  mergeLinkHeaders: BooleanQueryOperatorInput
  mergeCachingHeaders: BooleanQueryOperatorInput
  generateMatchPathRewrites: BooleanQueryOperatorInput
  cachePublic: BooleanQueryOperatorInput
  linkStyles: BooleanQueryOperatorInput
  preferCanvas: BooleanQueryOperatorInput
  maxWidth: StringQueryOperatorInput
  maxHeight: IntQueryOperatorInput
  typeName: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
  url: StringQueryOperatorInput
  refetchInterval: IntQueryOperatorInput
  schemaName: StringQueryOperatorInput
  imageFieldName: StringQueryOperatorInput
  pathCheck: BooleanQueryOperatorInput
}

type SitePluginPluginOptionsFonts {
  family: String
  subsets: [String]
  variants: [String]
}

input SitePluginPluginOptionsFontsFilterInput {
  family: StringQueryOperatorInput
  subsets: StringQueryOperatorInput
  variants: StringQueryOperatorInput
}

input SitePluginPluginOptionsFontsFilterListInput {
  elemMatch: SitePluginPluginOptionsFontsFilterInput
}

type SitePluginPluginOptionsHeaders {
  content_type: String
}

input SitePluginPluginOptionsHeadersFilterInput {
  content_type: StringQueryOperatorInput
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  siteTitle: String
  siteTitleShort: String
  siteDescription: String
  siteUrl: String
  logo: String
  social: SiteSiteMetadataSocial
}

input SiteSiteMetadataFilterInput {
  siteTitle: StringQueryOperatorInput
  siteTitleShort: StringQueryOperatorInput
  siteDescription: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  logo: StringQueryOperatorInput
  social: SiteSiteMetadataSocialFilterInput
}

type SiteSiteMetadataSocial {
  twitter: String
  fbAppId: String
}

input SiteSiteMetadataSocialFilterInput {
  twitter: StringQueryOperatorInput
  fbAppId: StringQueryOperatorInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}
